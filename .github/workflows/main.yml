name: Deploy to ECR

on:
  push:
    branches: [prod]

jobs:
  build:
    name: Build and Deploy Images
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Build and push DB image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_DB: assigment-dev-mysql
          IMAGE_TAG_DB: v3.0
        run: |
          cd docker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB -f Dockerfile_mysql .
          docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=pw $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB
          sleep 10
          docker exec mysql mysql -ppw -e "show databases;"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG_DB

      - name: Build, test, tag, and push app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: assigment-dev-app
          IMAGE_TAG_APP: v4.0
          DBHOST: ${{ secrets.DBHOST }}
          DBPORT: ${{ secrets.DBPORT }}
          DBUSER: ${{ secrets.DBUSER }}
          DBPWD: ${{ secrets.DBPWD }}
          BACKGROUND_IMAGE: ${{ secrets.BACKGROUND_IMAGE }}
        run: |
          cd docker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP -f Dockerfile \
            --build-arg DBHOST=$DBHOST \
            --build-arg DBPORT=$DBPORT \
            --build-arg DBUSER=$DBUSER \
            --build-arg DBPWD=$DBPWD \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
            --build-arg S3_BUCKET_URL=$BACKGROUND_IMAGE .
          docker run -d -p 8080:81 --name app $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP
          sleep 10  # It may take longer for your app to become healthy.
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "App is up and running. Proceeding with Docker push..."
            docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG_APP
          else
            echo "App did not respond with 200 OK. Received status code: $STATUS_CODE"
            exit 1
